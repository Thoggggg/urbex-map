# .github/workflows/cd.yml

# This workflow handles Continuous Deployment (CD).
# It builds and pushes the application's Docker image to the GitHub Container Registry.
name: Continuous Deployment

# Trigger this workflow ONLY on a push to the 'main' branch (i.e., after a PR is merged).
on:
  push:
    branches:
      - main

# Define environment variables for the workflow.
env:
  # The name of the Docker image. It will be prefixed with your GitHub username/organization.
  IMAGE_NAME: urbex-map 

jobs:
  build_and_push:
    name: Build and Push Image
    runs-on: ubuntu-latest
    # Set permissions for the job to allow it to write to the GitHub Container Registry.
    permissions:
      contents: read
      packages: write

    steps:
      # 1. Get the code from the repository
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Log in to the GitHub Container Registry (GHCR)
      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          # GITHUB_TOKEN is a special secret automatically provided by GitHub Actions.
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # 3. Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 4. Extract metadata for Docker (like tags)
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
          # This will create tags like:
          # - 'latest' for the main branch
          # - the git commit hash (e.g., a1b2c3d)

      # 5. Build the image and push it to GHCR
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: . # Use the root directory as the build context
          file: ./Dockerfile # Specify the root Dockerfile
          push: true # Actually push the image
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}